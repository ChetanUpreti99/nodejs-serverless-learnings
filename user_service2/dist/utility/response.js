const formatResponse = (statusCode, message, data) => {
    if (data) {
        return {
            statusCode,
            headers: {
                "Access-Control-Allow-Origin": "*",
            },
            body: JSON.stringify({
                message,
                data
            }),
        };
    }
    else {
        return {
            statusCode,
            headers: {
                "Access-Control-Allow-Origin": "*",
            },
            body: JSON.stringify({
                message
            }),
        };
    }
};
export const successResponse = (data) => {
    return formatResponse(200, "success", data);
};
export const errorResponse = (code = 1000, error) => {
    if (Array.isArray(error)) {
        const errorObject = error[0].constraints;
        const errorMessage = errorObject[Object.keys(errorObject)[0]] || "Error Occurred!";
        return formatResponse(code, errorMessage);
    }
    return formatResponse(code, `Error`);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9hcHAvdXRpbGl0eS9yZXNwb25zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLGNBQWMsR0FBRyxDQUFDLFVBQWtCLEVBQUUsT0FBZSxFQUFFLElBQWMsRUFBRSxFQUFFO0lBQzlFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVixPQUFPO1lBQ04sVUFBVTtZQUNWLE9BQU8sRUFBRTtnQkFDUiw2QkFBNkIsRUFBRSxHQUFHO2FBQ2xDO1lBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3BCLE9BQU87Z0JBQ1AsSUFBSTthQUNKLENBQUM7U0FDRixDQUFBO0lBQ0YsQ0FBQztTQUFNLENBQUM7UUFDUCxPQUFPO1lBQ04sVUFBVTtZQUNWLE9BQU8sRUFBRTtnQkFDUiw2QkFBNkIsRUFBRSxHQUFHO2FBQ2xDO1lBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3BCLE9BQU87YUFDUCxDQUFDO1NBQ0YsQ0FBQTtJQUNGLENBQUM7QUFDRixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRTtJQUMvQyxPQUFPLGNBQWMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQzVDLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsS0FBYyxFQUFFLEVBQUU7SUFDNUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDMUIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUN6QyxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLGlCQUFpQixDQUFDO1FBQ25GLE9BQU8sY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ0QsT0FBTyxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZvcm1hdFJlc3BvbnNlID0gKHN0YXR1c0NvZGU6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nLCBkYXRhPzogdW5rbm93bikgPT4ge1xuXHRpZiAoZGF0YSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzdGF0dXNDb2RlLFxuXHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiOiBcIipcIixcblx0XHRcdH0sXG5cdFx0XHRib2R5OiBKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdG1lc3NhZ2UsXG5cdFx0XHRcdGRhdGFcblx0XHRcdH0pLFxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhdHVzQ29kZSxcblx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogXCIqXCIsXG5cdFx0XHR9LFxuXHRcdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRtZXNzYWdlXG5cdFx0XHR9KSxcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IHN1Y2Nlc3NSZXNwb25zZSA9IChkYXRhOiBvYmplY3QpID0+IHtcblx0cmV0dXJuIGZvcm1hdFJlc3BvbnNlKDIwMCwgXCJzdWNjZXNzXCIsIGRhdGEpXG59XG5cbmV4cG9ydCBjb25zdCBlcnJvclJlc3BvbnNlID0gKGNvZGUgPSAxMDAwLCBlcnJvcjogdW5rbm93bikgPT4ge1xuXHRpZiAoQXJyYXkuaXNBcnJheShlcnJvcikpIHtcblx0XHRjb25zdCBlcnJvck9iamVjdCA9IGVycm9yWzBdLmNvbnN0cmFpbnRzO1xuXHRcdGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yT2JqZWN0W09iamVjdC5rZXlzKGVycm9yT2JqZWN0KVswXV0gfHwgXCJFcnJvciBPY2N1cnJlZCFcIjtcblx0XHRyZXR1cm4gZm9ybWF0UmVzcG9uc2UoY29kZSwgZXJyb3JNZXNzYWdlKTtcblx0fVxuXHRyZXR1cm4gZm9ybWF0UmVzcG9uc2UoY29kZSwgYEVycm9yYCk7XG59Il19