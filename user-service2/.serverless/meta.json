{
  "/Users/chetanupreti/Desktop/SELF_PROJECT/NODEJS/nodejs-serverless-learnings/user-service2": {
    "versionSfCore": null,
    "versionFramework": "4.1.19",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "aws": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "serverlessorganization",
            "service": "user-service",
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "versionFunctions": false,
              "stage": "dev",
              "region": "ap-south-1",
              "httpApi": {
                "cors": true
              }
            },
            "functions": {
              "signup": {
                "handler": "app/handler.Signup",
                "events": [
                  {
                    "httpApi": {
                      "path": "/signup",
                      "method": "post"
                    }
                  }
                ]
              }
            },
            "plugins": [
              "serverless-esbuild",
              "serverless-offline"
            ]
          },
          "configFileDirPath": "/Users/chetanupreti/Desktop/SELF_PROJECT/NODEJS/nodejs-serverless-learnings/user-service2",
          "config": {
            "type": "aws"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "isDefaultConfig": true
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/chetanupreti/Desktop/SELF_PROJECT/NODEJS/nodejs-serverless-learnings/user-service2",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "serverlessorganization",
      "service": "user-service",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "versionFunctions": false,
        "stage": "dev",
        "region": "ap-south-1",
        "httpApi": {
          "cors": true
        }
      },
      "functions": {
        "signup": {
          "handler": "app/handler.Signup",
          "events": [
            {
              "httpApi": {
                "path": "/signup",
                "method": "post"
              }
            }
          ]
        }
      },
      "plugins": [
        "serverless-esbuild",
        "serverless-offline"
      ]
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: serverlessorganization\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\nservice: user-service\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  versionFunctions: false\n  stage: \"dev\"\n  region: \"ap-south-1\"\n  httpApi:\n    cors: true\n\nfunctions:\n  signup:\n    handler: app/handler.Signup\n    events:\n      - httpApi:\n          path: /signup\n          method: post\n\n  # login:\n  #   handler: app/handler.Login\n  #   events:\n  #     - httpApi:\n  #         path: /login\n  #         method: post\n\n  # verify:\n  #   handler: app/handler.Verify\n  #   events:\n  #     - httpApi:\n  #         path: /verify\n  #         method: post\n\n  # profile:\n  #   handler: app/handler.Profile\n  #   events:\n  #     - httpApi:\n  #         path: /user\n  #         method: post\n  #     - httpApi:\n  #         path: /user\n  #         method: put\n  #     - httpApi:\n  #         path: /user\n  #         method: get\n\n  # cart:\n  #   handler: app/handler.Cart\n  #   events:\n  #     - httpApi:\n  #         path: /cart\n  #         method: post\n  #     - httpApi:\n  #         path: /cart\n  #         method: put\n  #     - httpApi:\n  #         path: /cart\n  #         method: get\n\n  # payment:\n  #   handler: app/handler.Payment\n  #   events:\n  #     - httpApi:\n  #         path: /payment\n  #         method: post\n  #     - httpApi:\n  #         path: /payment\n  #         method: put\n  #     - httpApi:\n  #         path: /payment\n  #         method: get\n\nplugins:\n  - serverless-esbuild # used for compiling/packaging the Typescript code\n  - serverless-offline # used for local execution\n",
    "command": [
      "offline"
    ],
    "options": {},
    "error": {
      "message": "Serverless now includes ESBuild and supports Typescript out-of-the-box. But this conflicts with the plugin 'serverless-esbuild'.\nYou can either remove this plugin and try Serverless's ESBuild support builtin, or you can set 'build.esbuild' to false in your 'serverless.yml'.\nFor more information go to, https://slss.io/buildoptions",
      "stack": "ServerlessError2: Serverless now includes ESBuild and supports Typescript out-of-the-box. But this conflicts with the plugin 'serverless-esbuild'.\nYou can either remove this plugin and try Serverless's ESBuild support builtin, or you can set 'build.esbuild' to false in your 'serverless.yml'.\nFor more information go to, https://slss.io/buildoptions\n    at PluginManager.addPlugin (file:///Users/chetanupreti/.serverless/releases/4.1.19/package/dist/sf-core.js:854:65)\n    at file:///Users/chetanupreti/.serverless/releases/4.1.19/package/dist/sf-core.js:854:1435\n    at Array.forEach (<anonymous>)\n    at PluginManager.loadAllPlugins (file:///Users/chetanupreti/.serverless/releases/4.1.19/package/dist/sf-core.js:854:1413)\n    at async Serverless.init (file:///Users/chetanupreti/.serverless/releases/4.1.19/package/dist/sf-core.js:861:9760)\n    at async runFramework (file:///Users/chetanupreti/.serverless/releases/4.1.19/package/dist/sf-core.js:909:880)\n    at async route (file:///Users/chetanupreti/.serverless/releases/4.1.19/package/dist/sf-core.js:920:16304)\n    at async Object.run2 [as run] (file:///Users/chetanupreti/.serverless/releases/4.1.19/package/dist/sf-core.js:920:16702)\n    at async run3 (file:///Users/chetanupreti/.serverless/releases/4.1.19/package/dist/sf-core.js:920:17962)",
      "code": "PLUGIN_TYPESCRIPT_CONFLICT"
    },
    "params": {},
    "machineId": "4ce40a50a2a1131f28630a9e020b429b",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "13d240c2-4dd0-4ede-9ee1-1e10252f1b04",
    "orgName": "serverlessorganization",
    "userId": "DkcxnKd7m5L67gZBBL",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "serverlessorganization",
    "subscription": {
      "subscriptionId": "41404cd1-42a9-4c30-8928-85cddae4560a",
      "subscriptionStatus": "pending"
    },
    "userEmail": "chetanupreti97@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "304550211898",
    "versionSf": "4.1.19",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  },
  "unknown": {
    "versionSfCore": null,
    "versionFramework": "4.1.20",
    "isWithinCompose": false,
    "composeOrgName": null,
    "composeServiceName": null,
    "command": [],
    "options": {
      "version": true
    },
    "error": null,
    "machineId": "d8a0d824c29b3a6acf7011db6e1d8f6a",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}